<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CoffeeScript | 高見龍]]></title>
  <link href="http://blog.eddie.com.tw/category/coffeescript/atom.xml" rel="self"/>
  <link href="http://blog.eddie.com.tw/"/>
  <updated>2014-05-29T11:41:33+08:00</updated>
  <id>http://blog.eddie.com.tw/</id>
  <author>
    <name><![CDATA[高見龍]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Happy Programming with Coffeescript]]></title>
    <link href="http://blog.eddie.com.tw/2012/05/20/happy-programming-with-coffeescript/"/>
    <updated>2012-05-20T07:44:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2012/05/20/happy-programming-with-coffeescript</id>
    <content type="html"><![CDATA[<p>不得不說JSDC的主辦單位超用心，還有幫講者加中文字幕
<iframe width="420" height="315" src="http://www.youtube.com/embed/2FmCJysWyww" frameborder="0" allowfullscreen></iframe></p>

<p>這是我自己用電腦螢幕錄的
<iframe width="420" height="315" src="http://www.youtube.com/embed/SIA5PO4ijPA" frameborder="0" allowfullscreen></iframe></p>

<p>這是今天我在台灣第一屆的JavaScript開發者大會<a href="http://jsdc.tw/2012/">JSDC</a>上用到的投影片。雖然主題跟在去年的<a href="http://phpconf.tw/2011">PHPConf Taiwan</a>的一樣，但因為這回的聽眾可都是熟悉JavaScript的，依舊沒辦法用同一招繼續騙吃騙喝(同一招不能對聖鬥士用兩次)，加上時間也只有30分鐘，所以投影片又幾乎整個敲掉重做。
<a href="https://speakerdeck.com/u/eddie/p/happy-programming-with-coffeescript" target="_blank"><img src="/images/2012/speakerdeck-happy-programming-with-coffeescript.jpg" alt="image" /></a>
<a href="https://speakerdeck.com/u/eddie/p/happy-programming-with-coffeescript" target="_blank">View on Speaker Deck</a> | <a href="http://www.slideshare.net/aquarianboy/happy-programming-with-coffeescript" target="_blank">View on Slideshare</a> | <a href="http://blog.eddie.com.tw/downloads/files/2012/happy_programming_with_coffeescript.pdf" target="_blank">Download PDF</a></p>

<p>原以為30分鐘講一百多張投影片會講不完結果就一直衝，衝到最後發現我竟然20分鐘就講完了，希望大家還喜歡，有什麼問題，也歡迎諸位前輩先進不吝給予建議，感謝!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPConf Taiwan 2011之CoffeeScript影片]]></title>
    <link href="http://blog.eddie.com.tw/2011/11/25/coffeescript-video-on-phpconf-taiwan-2011/"/>
    <updated>2011-11-25T18:16:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2011/11/25/coffeescript-video-on-phpconf-taiwan-2011</id>
    <content type="html"><![CDATA[<p>這是在第一屆的<a href="http://phpconf.tw/2011">PHPConf Taiwan</a>上講的CoffeeScript的錄影，感謝辛苦的拍攝及後製人員，畫質及收音效果相當的好。
<iframe width="420" height="315" src="http://www.youtube.com/embed/8i3qTKTr2tk" frameborder="0" allowfullscreen></iframe></p>

<p>投影片在這裡：
<a href="http://speakerdeck.com/u/eddie/p/coffeescript-a-better-way-to-write-javascript" target="_blank"><img src="/images/2011/speakerdeck-coffeescript-in-phpconf-taiwan.jpg" alt="image" /></a>
<a href="http://speakerdeck.com/u/eddie/p/coffeescript-a-better-way-to-write-javascript" target="_blank">View on Speaker Deck</a> | <a href="/downloads/files/2011/coffeescript.pdf">Download PDF</a></p>

<p>如果想要看得更清楚的話，可以到Youtube切換成HD 1080p模式觀賞。</p>

<p><a href="http://www.youtube.com/watch?v=EbmV-QCYkps&feature=BFa&list=PL9E199DE807DFD9E2&lf=plpp_play_all" target="_blank">全部PHPConf Taiwan 2011的影片播放清單</a></p>

<p>如果大家對於內容有什麼問題，也歡迎在這裡留言，大家一起研究討論 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript @ 20th Ruby Tuesday]]></title>
    <link href="http://blog.eddie.com.tw/2011/11/22/coffeescript-at-ruby-tuesday/"/>
    <updated>2011-11-22T12:56:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2011/11/22/coffeescript-at-ruby-tuesday</id>
    <content type="html"><![CDATA[<p>感謝<a href="http://ihower.tw/blog/">ihower</a>的邀請，這是今天我在<a href="http://registrano.com/events/ruby-tuesday-20">Ruby Tuesday</a>上用到的投影片。雖然主題跟在<a href="http://phpconf.tw/2011">PHPConf Taiwan</a>的一樣，但因為聽眾們大多對Ruby已經很熟悉，而且CoffeeScript在新版的Rails已經是內建的功能了，沒辦法用同一招繼續騙吃騙喝(同一招不能對聖鬥士用兩次啊)，所以有再特別為Rubyist們調整了內容。
<a href="http://speakerdeck.com/u/eddie/p/coffeescript-in-ruby-tuesday" target="_blank"><img src="/images/2011/speakerdeck-coffeescript-in-ruby-tuesday.jpg" alt="image" /></a>
<a href="http://speakerdeck.com/u/eddie/p/coffeescript-in-ruby-tuesday" target="_blank">View on Speaker Deck</a> | <a href="http://www.slideshare.net/aquarianboy/coffeescriptrubytuesday" target="_blank">View on Slideshare</a><br />
<a href="http://blog.eddie.com.tw/downloads/files/2011/coffeescript-ruby-tuesday.pdf" target="_blank">Download PDF</a> |
<a href="http://blog.eddie.com.tw/downloads/files/2011/coffeescript-ruby-tuesday-screen.zip" target="_blank">Download Screencast</a></p>

<p>因為Speaker Deck沒辦法全螢幕播放，所以另外也上傳了一份到Slideshare。不過傳到Slideshare的字型好像會跑掉，變超醜..</p>

<p>部份內容是screencast影片，所以沒辦法在slideshare線上看到，有興趣看的人可以另外下載。依舊沒有太多有趣的哏，希望大家會喜歡。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[幫你的類別增加功能]]></title>
    <link href="http://blog.eddie.com.tw/2011/11/19/extend-functionality-for-your-class/"/>
    <updated>2011-11-19T01:29:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2011/11/19/extend-functionality-for-your-class</id>
    <content type="html"><![CDATA[<p>CoffeeScript很有趣也很好寫，雖然它提供了許多的語法糖衣(Syntactic sugar)，讓你用短短的幾行程式碼就能換來原來你在JavaScript要做的事。但說白了它本質上還是JavaScript，JavaScript做不到的事，用CoffeeScript一樣也做不到。</p>

<p>不過有些很常做的工作，例字串變換大小寫，雖然JavaScript的字串本身已經有<code>toUpperCase()</code>以及<code>toLowerCase()</code>的功能，但我已經寫習慣Ruby的<code>upcase</code>跟<code>downcase</code>，要記那麼多個名字實在很辛苦，每次都得去google一才下知道要怎麼寫；又如果我想把某個字串重複10次，在Ruby有<code>*</code>可以用，但在JavaScript似乎沒有原生的function可以用.. 有沒有辦法也自己做一些讓自己順手的小工具，讓自己寫程式的時候順利一些呢?</p>

<p>如果你曾經寫過Python或Ruby，就會知道其實它們的類別裡的方法是可以很簡單的被打開再新增或覆寫(open class)，在JavaScript/CoffeeScript也有類似的做法，在CoffeeScript就是使用<code>::</code>來幫原來已經定義好的類別再增加功能：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">String</span><span class="o">::</span><span class="nv">repeat = </span><span class="nf">(n) -&gt;</span>
</span><span class='line'>  <span class="nb">Array</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span> <span class="nx">@</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">String</span><span class="o">::</span><span class="nv">downcase = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">@toLowerCase</span><span class="p">()</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">String</span><span class="o">::</span><span class="nv">upcase = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">@toUpperCase</span><span class="p">()</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">String</span><span class="o">::</span><span class="nv">find = </span><span class="nf">(str) -&gt;</span>
</span><span class='line'>  <span class="nx">@indexOf</span> <span class="nx">str</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nb">String</span><span class="o">::</span><span class="nv">has = </span><span class="nf">(str) -&gt;</span>
</span><span class='line'>  <span class="p">(</span><span class="nx">@indexOf</span> <span class="nx">str</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>編譯出來的JavaScript長這樣：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">repeat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">downcase</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">upcase</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">has</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">str</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其實那個<code>::</code>，用的就是<code>prototype</code>啦，這樣一來，你就可以寫出這樣的程式：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;a&quot;</span><span class="p">.</span><span class="nx">repeat</span> <span class="mi">10</span>                     <span class="c1"># aaaaaaaaaa</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;this is a book&quot;</span><span class="p">.</span><span class="nx">upper</span><span class="p">()</span>          <span class="c1"># THIS IS A BOOK</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;this is a book&quot;</span><span class="p">.</span><span class="nx">find</span> <span class="s">&quot;book&quot;</span>      <span class="c1"># 10</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;this is a book&quot;</span><span class="p">.</span><span class="nx">has</span> <span class="s">&quot;book&quot;</span>       <span class="c1"># true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>程式看起來乾淨多了，也習慣多了，心情也會比較好一些。</p>

<p>PS: 不知道會不會有善心人士會把Python或Ruby一些好用的功能也port一份過來? 還是早就已經有了.. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript 裡的全域變數]]></title>
    <link href="http://blog.eddie.com.tw/2011/11/18/global-variables-in-coffeescript/"/>
    <updated>2011-11-18T23:54:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2011/11/18/global-variables-in-coffeescript</id>
    <content type="html"><![CDATA[<p>在CoffeeScript裡，即使是一個空的.coffee檔，它也會被編譯成這樣：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>你在.coffee寫的任何變數或function，都是被宣告為區域變數包在裡面，只會在裡面有作用而已。這其實是好事，因為這樣一來與外界隔離，你寫的東西不會去污染到別人寫的，相對的別人寫的東西也不會去弄髒你寫的。但假設因為<strong><em>某些不可抗力</em></strong>，硬是要把變數或function弄成global好讓所有頁面都可以直接使用，也不是沒辦法，你可以直接把變數或function掛在<code>window</code>物件底下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">logout = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">alert</span> <span class="s">&quot;You&#39;ve already logout!&quot;</span> <span class="k">if</span> <span class="nx">confirm</span> <span class="s">&quot;Are you sure to logout?&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>或是這樣做：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">root = </span><span class="nx">exports</span> <span class="o">?</span> <span class="k">this</span>
</span><span class='line'><span class="nv">root.logout = </span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">alert</span> <span class="s">&quot;You&#39;ve already logout!&quot;</span> <span class="k">if</span> <span class="nx">confirm</span> <span class="s">&quot;Are you sure to logout?&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>第二種寫法看起來比較麻煩，但比較通用。<code>exports</code>是在<a href="http://nodejs.org/">Node.js</a>裡定義的物件，上面第1行的意思是指會先檢查<code>exports</code>是不是已經有定義了，如果這段程式是在Node.js裡執行的話，因為<code>exports</code>是存在的，所以會定義一個<code>root</code>變數並指向它；如果是在一般的網頁上執行，因為沒有<code>exports</code>，所以會定義一個<code>root</code>指向<code>this</code>，也就是<code>window</code>物件 ，所以這樣的寫法的好處就是在網頁或是Node.js都行得通。</p>

<p>這樣一來，你在頁面上的按鈕就可以這樣寫：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">value=</span><span class="s">&quot;logout&quot;</span> <span class="na">id=</span><span class="s">&quot;Logout&quot;</span> <span class="na">onclick=</span><span class="s">&quot;logout();&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但是，如果可以的話，建議還是儘量避免用這種global變數的方式來寫程式，現在的JavaScript越寫越複雜，沒人知道你寫的東西會不會剛好就去衝到誰家寫的library，或是衝到你自己或同事寫的程式碼 :)</p>
]]></content>
  </entry>
  
</feed>
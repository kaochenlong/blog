<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Happy Ruby | 高見龍]]></title>
  <link href="http://blog.eddie.com.tw/category/happy-ruby/atom.xml" rel="self"/>
  <link href="http://blog.eddie.com.tw/"/>
  <updated>2013-12-17T01:13:27+08:00</updated>
  <id>http://blog.eddie.com.tw/</id>
  <author>
    <name><![CDATA[高見龍]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Public, Protected and Private Method in Ruby]]></title>
    <link href="http://blog.eddie.com.tw/2011/07/26/public-protected-and-private-method-in-ruby/"/>
    <updated>2011-07-26T15:45:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2011/07/26/public-protected-and-private-method-in-ruby</id>
    <content type="html"><![CDATA[<p>如果你曾經在別的程式語言寫過OOP，你也許對類別的方法存取限制不會太陌生。類別的方法的存取限制常見的有三種：public、protected以及private。</p>

<p>這三種存取限制，比較常聽到的解釋大概會是像這樣：
<blockquote><p>“public就是所有的人都可以直接存取，private是只有在類別內部才可以存取；而protected差不多是在這兩者之間，比private寬鬆一些，但又沒有public那麼自在，protected在同一個類別內或是同一個package，或是繼承它的子類別可以自由取用，但如果不是的話則不可存取。”</p></blockquote>
Ruby也有類似的方法存取限制，為什麼特別說「類似」，前面又為什麼需要特別提「大家常聽到的解釋」，因為Ruby在這部份的實作是不太一樣的，待會後面會再詳細說明。</p>

<h3>怎麼做?</h3>

<p>先來看看怎麼寫，Ruby的方法存取限制有兩種寫法，一種是寫在方法定義之前：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Father</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def method_a</span>
</span><span class='line'><span class="sr">    puts &quot;I am METHOD A in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def method_b</span>
</span><span class='line'><span class="sr">    puts &quot;I am METHOD B in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">protected</span>
</span><span class='line'><span class="sr">def method_c</span>
</span><span class='line'><span class="sr">    puts &quot;I am METHOD C in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">private</span>
</span><span class='line'><span class="sr">def method_secret</span>
</span><span class='line'><span class="sr">    puts &quot;I am spider man in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在Ruby的類別裡，方法只要沒有特別限制預設就是<code>publilc</code>的，除了一個例外，就是<code>initialize</code>方法，它永遠是private的，只會被<code>new</code>方法呼叫。</p>

<p>把存取控制放在前面的這種寫法，只要在它設定之後的方法定義都會受影響，除非又遇到另一個存取控制的設定。在上面的這段程式碼，method_a跟method_b沒有特別限制，所以是public方法(如果你想要特別加上public也沒問題，只是通常不會這麼做)，method_c是protected方法，而method_secret則是屬於private方法。</p>

<p>另一種的方法存取限制是寫在方法定義之後：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Father</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def method_a</span>
</span><span class='line'><span class="sr">    puts &quot;I am METHOD A in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def method_b</span>
</span><span class='line'><span class="sr">    puts &quot;I am METHOD B in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def method_c</span>
</span><span class='line'><span class="sr">    puts &quot;I am METHOD C in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def method_secret</span>
</span><span class='line'><span class="sr">    puts &quot;I am spider man in </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">protected :method_c</span>
</span><span class='line'><span class="sr">private :method_secret</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>哪種比較好?</h3>

<p>這兩種寫法哪種方法比較好? 都好，隨個人喜好。我個人喜好第一種，因為我習慣會先把public的方法放在類別的上半部，而把private方法放在類別的最底下，所以使用第一種寫法對我來說寫起來比較順手。</p>

<p>其實public、protected以及private這三個在Ruby裡並不是關鍵字，它也只是Ruby裡的方法而已。</p>

<h3>哪裡不一樣?</h3>

<p>前面為什麼會特別提到Ruby的方法存取限制跟其它的程式語言「類似」呢? 雖然Ruby裡的確也有public、protected以及private，但事實上是不太一樣的，特別是private方法。我們先來看一小段的程式碼：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">father</span> <span class="o">=</span> <span class="no">Father</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">father</span><span class="o">.</span><span class="n">method_a</span>        <span class="c1"># I am METHOD A in Father</span>
</span><span class='line'><span class="n">father</span><span class="o">.</span><span class="n">method_b</span>        <span class="c1"># I am METHOD B in Father</span>
</span><span class='line'><span class="n">father</span><span class="o">.</span><span class="n">method_c</span>        <span class="c1"># NoMethodError</span>
</span><span class='line'><span class="n">father</span><span class="o">.</span><span class="n">method_secret</span>   <span class="c1"># NoMethodError</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
father是Father類別生出來的實體，而實體的public方法如所預期的印出結果，protected跟private方法呼叫的時候產生NoMethodError的例外，看起來很正常，那到底是哪邊不太一樣?</p>

<p>我們再來做個叫做Son的子類別，繼承自Father類別：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Son</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Father</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def son_method_c</span>
</span><span class='line'><span class="sr">    method_c</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def son_method_secret</span>
</span><span class='line'><span class="sr">    method_secret</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
我給Son類別加了兩個方法，分別會呼叫Father類別的protected跟private方法，再來看範例：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">son</span> <span class="o">=</span> <span class="no">Son</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">son</span><span class="o">.</span><span class="n">method_a</span>           <span class="c1"># I am METHOD A in Son</span>
</span><span class='line'><span class="n">son</span><span class="o">.</span><span class="n">method_b</span>           <span class="c1"># I am METHOD B in Son</span>
</span><span class='line'><span class="n">son</span><span class="o">.</span><span class="n">method_c</span>           <span class="c1"># NoMethodError</span>
</span><span class='line'><span class="n">son</span><span class="o">.</span><span class="n">method_secret</span>      <span class="c1"># NoMethodError</span>
</span><span class='line'><span class="n">son</span><span class="o">.</span><span class="n">son_method_c</span>       <span class="c1"># I am METHOD C in Son</span>
</span><span class='line'><span class="n">son</span><span class="o">.</span><span class="n">son_method_secret</span>  <span class="c1"># I am spider man in Son</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在子類別呼叫父類別的protected方法，這不是新鮮事，但你注意到了嗎? 在子類別裡可以直呼叫父類別的private方法耶!</p>

<p>先來看這行：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">son</span><span class="o">.</span><span class="n">method_a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
一般我們會把這行翻譯成：</p>

<p><blockquote><p>“有一個物件叫做son，然後呼叫了son物件的method_a方法”</p></blockquote></p>

<p>不過如果你曾經認識過Smalltalk或是Objective-C的話，你會發現他們會把這行翻譯成：
<blockquote><p>“有一個接收者(receiver)叫做son，然後對著這個recevier送了一個叫做method_a的訊息(message)”</p></blockquote></p>

<p>為什麼特別提這個? 因為<strong>在Ruby裡的private方法，只要沒有明確的指出recevier的話就都可以呼叫</strong>。所以在上面例子裡的Son類別，即使是呼叫父類別的private方法，只要不要有recevier，它就不會有錯誤產生。</p>

<p>也就是因為這樣，在Ruby的private方法其實不只類別自己內部可以存取，它的子類別也可以。再來看一下這段程式碼：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">A</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def a</span>
</span><span class='line'><span class="sr">    self.b</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">private</span>
</span><span class='line'><span class="sr">def b</span>
</span><span class='line'><span class="sr">    puts &quot;Hello, This is Private B!&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">the_a</span> <span class="o">=</span> <span class="n">A</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">the_a</span><span class="o">.</span><span class="n">a</span>        <span class="c1"># NoMethodError</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在A類別的a方法呼叫類別內部的b方法，看起來很合理吧，但實際執行就會出錯NoMethodError的例外，說你存取到了private方法了!! 為什麼? 因為你在呼叫方法b的時候加上了<code>self</code>，前面有提到”在呼叫Ruby的private方法時，不能明確的指定recevier”，在這裡卻明確的指出了<code>self</code>，所以出現錯誤訊息了。沒錯，連self也不行。</p>

<p>我們很常用的<code>puts</code>方法，它就是Object這個類別的private方法之一(更正確的說，是Kernel模組mixin到Object類別裡的方法)。我們平常會這樣用：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Hello Ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
但如果你這樣做：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;Hello Ruby&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
就會跳出<code>NoMethodError</code>。</p>

<h3>Protected方法?</h3>

<p>那protected方法呢? 它的規定就沒那麼嚴格了，你要指定或不指定recevier都可以；至於public方法，就跟其它語言的定義差不多，隨便你用啦。</p>

<h3>真的這麼private?</h3>

<p>不過，其實Ruby的private方法也不是真的那麼private，轉個彎，一樣可以被外部呼叫：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">father</span> <span class="o">=</span> <span class="no">Father</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">father</span><span class="o">.</span><span class="n">method_secret</span>          <span class="c1"># 是我們預期的 NoMethodError 沒錯</span>
</span><span class='line'><span class="n">father</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:method_secret</span><span class="p">)</span>   <span class="c1"># I am spider man in Father</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
前面提到的<code>puts</code>其實也可以改寫成：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:puts</span><span class="p">,</span> <span class="s2">&quot;Hello Ruby&quot;</span><span class="p">)</span>  <span class="c1"># Hello Ruby</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這..這樣會不會有點扯? 如果連private都能被直接存取，那當初何必還要這樣設計呢? 還是直接乾脆全部都public就好了?</p>

<p>我想這其實是Ruby當初設計的哲學之一，Ruby把很大部份的權利都下放給程式設計師，讓開發者有最大的彈性空間可以運用(或惡搞)，也就是這樣，在Ruby做Metaprogramming是相對的比在別的程式語言容易的。不只在這裡，你應該還可以在很多地方看到這個Ruby的專屬特性。</p>

<h3>僅供參考</h3>

<p>如果說這些存取限制只是”參考用”，那到底什麼時候會用到?</p>

<p>雖然說它只是”參考用”，我個人還是會把它當做是程式碼的寫作準則。雖然你可以透過send方法來存取private方法，但不代表你就應該這樣做。而且它也不是真的那麼沒有用，像是在寫Rails的時候，Controller裡的Action預設都是public的，如果你的routes.rb如果把路徑的對應全部打開，那所有的Action都有可能透過網址而被存取到，那也許不會是你想要的結果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby裡的方法呼叫]]></title>
    <link href="http://blog.eddie.com.tw/2011/06/16/method-call-in-ruby/"/>
    <updated>2011-06-16T15:02:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2011/06/16/method-call-in-ruby</id>
    <content type="html"><![CDATA[<p>Ruby裡的方法呼叫雖然還滿直覺的，不過偶爾可能會因為位置、角色的不同而會有不同的結果。</p>

<h3>雙胞胎?</h3>

<p>直接來一段程式碼：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ObjA</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is method func&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is a later func&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">obj</span> <span class="o">=</span> <span class="no">ObjA</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">func</span> <span class="c1"># 猜猜這裡會是什麼?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在Ruby裡，如果在同一個scope底下定義了兩個同名的method並不會發生錯誤，但<strong>先定義的method會被後面定義的給蓋掉</strong>，所以執行這段script的話：</p>

<pre><code>&gt; ruby test.rb
this is a later func
</code></pre>

<p>如果你有打開ruby的警告模式選項(<code>-w</code>)，在執行的時候就會出現警告訊息：</p>

<pre><code>&gt; ruby -w test.rb
test.rb:7: warning: method redefined; discarding old func
test.rb:3: warning: previous definition of func was here
this is a later func
</code></pre>

<h3>血脈相連</h3>

<p>再來我們看一下在類別裡的方法呼叫：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ObjA</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is ObjA&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ObjB</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ObjA</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is ObjB&quot;</span>
</span><span class='line'><span class="sr">    super</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">obj</span> <span class="o">=</span> <span class="no">ObjB</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">func</span> <span class="c1"># 猜猜這裡會是什麼?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
你在ObjB類別裡的看到的那個”super”，它會<strong>呼叫跟它血緣最近的父類別的同名method</strong>。它會延著繼承一直往上找，如果一直找都找不到同名的method的話，則會跳出錯誤訊息：</p>

<pre><code>NoMethodError: super: no superclass method ‘func’
</code></pre>

<p>所以上面這段script的執行結果：</p>

<pre><code>&gt; ruby test.rb
this is ObjB
this is ObjA
Who’s your daddy?
</code></pre>

<p>Ruby的OOP是<strong>單一繼承</strong>的，藉由引入了module的Mixin概念，可以讓你有用到多重繼承的好處，又不擔心多重繼承的問題(例如<a href="http://en.wikipedia.org/wiki/Diamond_problem">鑽石繼承問題</a>)</p>

<p>來看程式碼：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">ModA</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def mod_method</span>
</span><span class='line'><span class="sr">    puts &quot;this is mod_method in ModB&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is ModA&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">module</span> <span class="nn">ModB</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def mod_method</span>
</span><span class='line'><span class="sr">    puts &quot;this is mod_method in ModB&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is ModB&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ObjA</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is ObjA&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">ObjB</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ObjA</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include ModA</span>
</span><span class='line'><span class="sr">include ModB</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def func</span>
</span><span class='line'><span class="sr">    puts &quot;this is ObjB&quot;</span>
</span><span class='line'><span class="sr">    super</span>
</span><span class='line'><span class="sr">    mod_method</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">obj</span> <span class="o">=</span> <span class="no">ObjB</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">func</span> <span class="c1"># 猜猜這裡會是什麼?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在往下看之前，可以先想一下最後一行的<code>obj.func</code>會印出什麼答案?</p>

<p>在Ruby裡，如果在類別裡有引進了module，而module裡剛好有跟類別定義了同名的method的話，<strong>會以類別裡定義的方法為主</strong>。我們來看一下執行的結果：</p>

<pre><code>&gt; ruby test.rb
this is ObjB
this is ModB
this is mod_method in ModB
</code></pre>

<p>第一行的”this is ObjB”沒問題，確實是呼叫ObjB的fun，但第二行為什麼是ModB而不是”this is ObjA”? 不是會呼叫離它最近的父類別同名method嗎?</p>

<p>沒錯，的確是呼叫離它最近的父類別同名method，但被module給mixin之後，繼承的族譜有稍微變了。我們直接來看一下這行：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">p</span> <span class="no">ObjB</span><span class="o">.</span><span class="n">ancestors</span> <span class="c1"># [ObjB, ModB, ModA, ObjA, Object, Kernel]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
你會發現ObjB的老爸本來應該是ObjA，但透過mixin之後卻變成ModB、ModA、ObjA，再來才是Object(如果在Ruby 1.9版本的話，上面還有個BasicObject)。至於這邊的Kernel是什麼? 它也是個mixin到Object裡的一個module而已。</p>

<p>所以這個地方的<code>super</code>會呼叫離它最近的func，也就是ModB的func。</p>

<p>那假設我們引入了兩個剛好有定義同名method，這樣一來又要呼叫誰的? 規則其實也滿簡單的，跟method定義有點像，就是比較晚include裡來的，會蓋掉前面include的模組方法。所以在這邊的第三行會是”this is mod_method in ModB”</p>

<h3>快快樂樂來寫code</h3>

<p>接下來如果時間允許的話，預計會來把「快快樂樂學Ruby」系列給補完，希望可以在大家在學習Ruby的時候，帶來一些些的幫助。</p>

<p>若內容有錯誤或觀念不正確，再請不吝告知，感謝!</p>
]]></content>
  </entry>
  
</feed>
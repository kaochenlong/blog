<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 高見龍]]></title>
  <link href="http://blog.eddie.com.tw/category/ruby/atom.xml" rel="self"/>
  <link href="http://blog.eddie.com.tw/"/>
  <updated>2015-04-19T19:55:28+08:00</updated>
  <id>http://blog.eddie.com.tw/</id>
  <author>
    <name><![CDATA[高見龍]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 語法放大鏡之「有時候會看到有兩個冒號寫法是什麼意思?」]]></title>
    <link href="http://blog.eddie.com.tw/2015/04/19/namespace/"/>
    <updated>2015-04-19T18:09:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2015/04/19/namespace</id>
    <content type="html"><![CDATA[<p class="info">
「<a href="http://blog.eddie.com.tw/2014/12/28/ruby-for-rails/">Ruby 語法放大鏡</a>」系列短文主要是針對在大家學習 Ruby 或 Rails 時看到一些神奇但不知道用途的語法介紹，希望可以藉由這一系列的短文幫大家更容易的了解到底 Ruby 或 Rails 是怎麼回事。</p>


<p>隨便打開你 Rails 專案裡的 model 檔案，它可能會長得像這樣：</p>

<pre><code class="ruby">class Post &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :category
end
</code></pre>

<p>第一行後面那個 <code>ActiveRecord::Base</code> 裡面的 2 個冒號 <code>::</code>，各位知道是什麼意思嗎?</p>

<h2>菜市場名</h2>

<p>也許你也叫金城武(或自己覺得自己長得像金城武)，然後我也剛好也很巧叫金城武，這樣在大街上大叫一聲帥哥就一堆人回頭了，不太好。</p>

<p>寫程式偶爾也會遇到這樣的狀況，舉例來說，如果大家剛好都有一個叫做 <code>Animal</code> 的類別或是 <code>Flyable</code> 的模組，放在同一個專案裡就會打架了。所以 Ruby 有設計 namespace 來解決這個問題。</p>

<p>在 Ruby 裡，因為 <code>module</code> 或 <code>class</code> 可以有巢狀結構(類別裡可以包模組，模組裡面可以包類別，就是大腸包小腸的概念啦)，剛好可以拿來做 namespace 的包裝，例如：</p>

<pre><code class="ruby">module Utility
  module Flyable
    def fly
      # ....
    end
  end
end
</code></pre>

<p>這樣一來，如果要使用 <code>Flyable</code> 這個類別的話：</p>

<pre><code class="ruby">class Cat
  include Utility::Flyable
end
</code></pre>

<p>要 include 那個 Flyable 模組，就必須連名帶姓的 include，也就是「樹林::金城武」、「三重::劉德華」的概念。</p>

<p>除此之外，其實你也可把常數包在 namespace 裡</p>

<pre><code class="ruby">module Utility
  TaxRate = 10
  module Flyable
    Speed = 20
    def fly
      # ....
    end
  end
end

puts Utility::TaxRate          # =&gt; 10
puts Utility::Flyable::Speed   # =&gt; 20
</code></pre>

<p>要使用這些常數，也是一樣要提供完整的路徑給才行。(如果你知道的話，其實不管是類別或模組，它們的名字基本上也就是常數而已)</p>

<p>所以，原來這段程式範例：
<code>ruby
class Post &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :category
end
</code></p>

<p>它的意思就是說有一個叫做 <code>Post</code> 的類別，它是繼承自某個放在 <code>ActiveRecord</code> 的模組(或類別)裡的 <code>Base</code> 類別。如果去 github 上翻 Rails 的原始碼的話(<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/base.rb" target="_blank">連結</a>)，應該可以看到這段：</p>

<pre><code class="ruby">module ActiveRecord
  # .....
  # 中略
  # .....
  class Base
    extend ActiveModel::Naming
    extend ActiveSupport::Benchmarkable
    extend ActiveSupport::DescendantsTracker

    extend ConnectionHandling
    extend QueryCache::ClassMethods
    # ... 略
  end
end
</code></pre>

<p>的確是有一個 <code>ActiveRecord</code> 的模組，裡面包了一個 <code>Base</code> 的類別沒錯 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 語法放大鏡之「類別跟模組有什麼不一樣?」]]></title>
    <link href="http://blog.eddie.com.tw/2015/03/24/class-and-module/"/>
    <updated>2015-03-24T12:09:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2015/03/24/class-and-module</id>
    <content type="html"><![CDATA[<p class="info">
「<a href="http://blog.eddie.com.tw/2014/12/28/ruby-for-rails/">Ruby 語法放大鏡</a>」系列短文主要是針對在大家學習 Ruby 或 Rails 時看到一些神奇但不知道用途的語法介紹，希望可以藉由這一系列的短文幫大家更容易的了解到底 Ruby 或 Rails 是怎麼回事。</p>


<p>在網路上常看到一些介紹 Ruby 裡類別(class)跟模組(module)的差別，有人說他們兩個差別很大，是完全不同的東西。事實上，類別跟模組是很像的。可能很多人不知道，類別跟模組是有血緣關係的，如果你試著這樣做：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="no">Class</span><span class="o">.</span><span class="n">superclass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>你會得到 <code>Module</code> 這個類別。也就是說，在 Ruby 裡，「類別」其實就是「模組」的後代，類別根本就是繼承自模組來的。即然是同一個體系，自然沒有太多的差異。</p>

<h3>那差別是什麼?</h3>

<p>最明顯的差別，當然就是一個是用 <code>class</code> 來定義，一個是用 <code>module</code> 來定義。至於前、後代功能上的差別，我們只要寫幾行簡單的程式就可以看得出來：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;前、後代的類別方法差異：&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">p</span> <span class="no">Class</span><span class="o">.</span><span class="n">methods</span> <span class="o">-</span> <span class="no">Module</span><span class="o">.</span><span class="n">methods</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;或直接這樣寫：&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">p</span> <span class="no">Class</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面這段會得到 <code>[]</code> (空陣列)，表示他們在類別方法上並沒有差別。再來看看實體方法的差別：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;前、後代的實體方法差異：&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">p</span> <span class="no">Class</span><span class="o">.</span><span class="n">instance_methods</span> <span class="o">-</span> <span class="no">Module</span><span class="o">.</span><span class="n">instance_methods</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;或直接這樣寫：&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">p</span> <span class="no">Class</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>會得到以下結果：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="ss">:allocate</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:superclass</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中，<code>allocate</code> 跟 <code>new</code> 跟產生實體(instance)有關，<code>superclass</code> 跟繼承有關。</p>

<p>也就是說，類別比模組多了可以產生實體的能力以及繼承能力。</p>

<h3>那用途上有什麼差別?</h3>

<p>請大家先思考一個問題：「如果我有一個小貓類別，我希望這個小貓會飛，你會怎麼做?」</p>

<ol>
<li>直接寫一個有飛行功能的小鳥類別，然後再叫小貓類別去繼承它?</li>
<li>直接把飛行功能寫在小貓類別裡?</li>
</ol>


<p>第 1 種做法的設計有點怪怪的，好好的貓不當，為什麼要去當鳥? 為了想要有飛行功能就去當別人家的小孩...</p>

<p>第 2 種做法看來似乎可行，但如果之後又有個「我希望我的這個小狗類別也會飛!」的需求，那這樣又得在小狗類別裡寫一段飛行功能，程式碼沒辦法共同。</p>

<p>這時候，模組就可以派上用場了。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Flyable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fly</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;I can fly!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Cat</span>
</span><span class='line'><span class="sr">  include Flyable</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">kitty</span> <span class="o">=</span> <span class="no">Cat</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">kitty</span><span class="o">.</span><span class="n">fly</span>        <span class="c1"># =&gt; I can fly!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在上面這段範例中，我做了一個飛行模組(Flyable)，然後小貓類別不用特別寫什麼功能，就只要把這個飛行模組掛上去(include)就搞定了。</p>

<p>如果之後小狗類別也想要會飛的話，只要這樣：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Flyable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>小狗也會飛了。</p>

<h3>要用繼承還是要用模組?</h3>

<p>基本上，如果你發現你要做的這個功能，它可能在很多不同體系的類別裡都會用得到，那你可以考慮把功能包在模組裡，然後在必要的時候再 include 進來即可。</p>

<p>如果你還是不知道到底類別跟模組有什麼差別，我再舉二個例子。</p>

<p>不知道大家有沒看過<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E5%BD%B1%E5%BF%8D%E8%80%85">火影忍者</a>這部漫畫，漫畫裡的主人公之一，宇智波佐助，因為他們家族血統的關係，他寫輪眼這個功能是天生就有的，這個功能是從他的家族「繼承」來的。而佐助的老師，旗木卡卡西，他雖然也有寫輪眼功能，但他的寫輪眼並非繼承來的，事實上是他在年輕時候 include 了某個寫輪眼模組，所以才有這個效果。</p>

<p>另一個例子，<a href="http://zh.wikipedia.org/wiki/ONE_PIECE">海賊王</a>漫畫裡，魯夫本來是普通人，但在偶然的機會下，他 include 了橡膠果實之後，他就有了橡膠人的能力了，並不是因為他老爸是橡膠人所以他才是橡膠人。</p>

<p>以上，希望能讓大家在使用類別跟模組時有更進一步的認識 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 語法放大鏡之「Ruby 的參數」]]></title>
    <link href="http://blog.eddie.com.tw/2015/03/22/parameters/"/>
    <updated>2015-03-22T12:09:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2015/03/22/parameters</id>
    <content type="html"><![CDATA[<p class="info">
「<a href="http://blog.eddie.com.tw/2014/12/28/ruby-for-rails/">Ruby 語法放大鏡</a>」系列短文主要是針對在大家學習 Ruby 或 Rails 時看到一些神奇但不知道用途的語法介紹，希望可以藉由這一系列的短文幫大家更容易的了解到底 Ruby 或 Rails 是怎麼回事。</p>


<p>大家在寫 Rails 專案的時候，一定都有用過 <code>link_to</code> 這個 view helper。問大家一個簡單的問題：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;刪除&#39;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s1">&#39;sure?&#39;</span> <span class="p">},</span> <span class="ss">class</span><span class="p">:</span><span class="s1">&#39;btn&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>請問，上面這段範例中，<code>link_to</code> 方法共有幾個參數?</p>

<p>如果你的答案是 5 個，那你就需要繼續往下看了 :)</p>

<p>在<a href="/2015/03/21/attr_accessor/">這篇文章</a>中提到，Ruby 很愛省略東西，像是方法的小括號，所以原來上面的 <code>link_to</code> 語法：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;刪除&#39;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s1">&#39;sure?&#39;</span> <span class="p">},</span> <span class="ss">class</span><span class="p">:</span><span class="s1">&#39;btn&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
原本應該長這樣：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">link_to</span><span class="p">(</span><span class="s1">&#39;刪除&#39;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s1">&#39;sure?&#39;</span> <span class="p">},</span> <span class="ss">class</span><span class="p">:</span><span class="s1">&#39;btn&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>最後一個參數如果是 Hash，大括號可省略</h3>

<p>在 Ruby 省略小括號大家都知道，不過逗點分開的參數不是 5 個嗎?</p>

<p>事實上，在 Ruby 中如果最後一個參數是 Hash 的話，它的大括號是可以省略的。舉個例子來說：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">say_hello_to</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>  <span class="c1"># do something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
如果要使用這個方法，可以這樣寫：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">say_hello_to</span> <span class="s2">&quot;eddie&quot;</span><span class="p">,</span> <span class="p">{</span><span class="ss">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="ss">favorite</span><span class="p">:</span> <span class="s1">&#39;ruby&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
又，因為最後一個參數是 Hash，所以 Hash 的大括號也可省略：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">say_hello_to</span> <span class="s2">&quot;eddie&quot;</span><span class="p">,</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="ss">favorite</span><span class="p">:</span> <span class="s1">&#39;ruby&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果你了解有什麼東西被省略的話，一開始的那段 link_to 的範例：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">link_to</span> <span class="s1">&#39;刪除&#39;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s1">&#39;sure?&#39;</span> <span class="p">},</span> <span class="ss">class</span><span class="p">:</span><span class="s1">&#39;btn&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
還原之後會變成：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">link_to</span><span class="p">(</span><span class="s1">&#39;刪除&#39;</span><span class="p">,</span> <span class="n">user</span><span class="p">,</span> <span class="p">{</span><span class="nb">method</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">confirm</span><span class="p">:</span> <span class="s1">&#39;sure?&#39;</span> <span class="p">},</span> <span class="ss">class</span><span class="p">:</span><span class="s1">&#39;btn&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>所以，其實參數個數只有 3 個，最後一個參數是一個 Hash。</p>

<h3>小結</h3>

<p>Ruby 的語法可以適時的省略小括號、大括號或 return，程式碼寫起來的確會更像文章，對新手來說可能會容易混淆，不過看久了應該也會慢慢習慣了。</p>

<p>以上，希望對大家有幫助 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 語法放大鏡之「attr_accessor 是幹嘛的?」]]></title>
    <link href="http://blog.eddie.com.tw/2015/03/21/attr_accessor/"/>
    <updated>2015-03-21T12:09:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2015/03/21/attr_accessor</id>
    <content type="html"><![CDATA[<p class="info">
「<a href="http://blog.eddie.com.tw/2014/12/28/ruby-for-rails/">Ruby 語法放大鏡</a>」系列短文主要是針對在大家學習 Ruby 或 Rails 時看到一些神奇但不知道用途的語法介紹，希望可以藉由這一系列的短文幫大家更容易的了解到底 Ruby 或 Rails 是怎麼回事。</p>


<p>先說結論：</p>

<p><blockquote><p>attr_accessor 會幫你在 Ruby 的類別裡產生一對 getter 以及 setter 方法。</p></blockquote></p>

<p>不過我想這結論對新手來說有講跟沒講一樣，讓我們繼續往下看。</p>

<p>跟別的程式語言比起來，Ruby 可以省略很多東西，像是呼叫方法的時候可以不用小括號，回傳資料的時候有時候不用特別加 <code>return</code>。</p>

<p>我們先來看一段範例：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Girl</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;mary = Girl.new(20)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>這是一個簡單的 Ruby 類別，我用 <code>Girl</code> 類別建一個名為 <code>mary</code> 的實體(instance)，並且在初始化的時候就設定她的年紀為 20。<code>Girl</code> 類別裡有一個 <code>@age</code> 這個實體變數(instance variable)，也許你會猜說如果要知道 <code>mary</code> 的年紀的話，只要：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="n">mary</span><span class="o">.</span><span class="n">age</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>就行了，但一執行就會發現錯誤訊息：</p>

<pre><code>undefined method `age' for #&lt;Girl:0x007f93a609fa10 @age=20&gt; (NoMethodError)
</code></pre>

<p>怪了，我是想要存取 <code>age</code> 這個屬性，為什麼錯誤訊息卻是 <code>undefined method</code>?</p>

<p>在解釋之前，要先說明幾個 Ruby 這個程式語言跟別家程式語言在設計上的不同：</p>

<h3>一、Ruby 的方法呼叫，常常會適時的省略小括號：</h3>

<p>舉個例子來說：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">say_hi_to</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;say_hi_to(&quot;eddie&quot;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>但我們通常會寫成：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">say_hi_to</span> <span class="s2">&quot;eddie&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在呼叫方法的時候省略小括號，這在 Ruby 是很常見的寫法。</p>

<h3>二、Ruby 並沒有「屬性」(property/attribute)這樣的東西：</h3>

<p>雖然 <code>mary</code> 看起來有一個 <code>@age</code> 實體變數，但不表示是可以直接存取的屬性。硬是要用 <code>mary.age</code> 問她年紀，或是要用 <code>mary.age = 18</code> 來設定她的年紀，她都會賞你一巴掌，給你錯誤訊息的。</p>

<p><code>mary.age</code> 你以為是讀取 mary 上的 age 屬性，但事實上是在執行 <code>mary.age()</code> 方法，只是小括號被省略了。<code>mary.age=18</code> 你以為是設定 mary 的 age 屬性，但事實上是執行 <code>mary.age=(18)</code> 方法，只是小括號被省略了。</p>

<p>在 Ruby 裡，很多東西都跟你看到的不太一樣，例如，你以為 <code>1 + 2</code> 是簡單的數學運算嗎? 其實它是 <code>1.+(2)</code>，它是對數字物件 1 送了一個 <code>+</code> 的訊息，並且把數字物件 2 當做參數傳給它。</p>

<p>好啦，即然知道它們都是方法，那要怎麼定義它們呢?</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Girl</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def age</span>
</span><span class='line'><span class="sr">    return @age  # 這個 return 通常會省略</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">age</span><span class="o">=</span><span class="p">(</span><span class="n">new_age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">new_age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>上面這段範例中，第 6 ~ 8 行的方法會回傳 <code>@age</code>，又常稱之 getter；第 10 ~ 12 行的方法它會設定 <code>@age</code> 的值，故又常稱之 setter。</p>

<p>不過...等一下! 為什麼方法後面有個等號?</p>

<p>請把等號當做一般的字母看待。在 Ruby 定義方法的時候，等號跟其它字元一樣都可以是方法名字的一部份，只是這個特殊字元必須要放在方法名稱的結尾(其實包括問號跟驚嘆號也都一樣)。</p>

<p>這個方法就叫做 <code>age=</code>，要使用它就是用 <code>age=(18)</code>，沒錯，就是連等號一起呼叫它。所以，其實標準形態應該長這樣：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">mary</span><span class="o">.</span><span class="n">age</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>又，因為前面提到，Ruby 可以省略小括號，所以可寫成：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">mary</span><span class="o">.</span><span class="n">age</span><span class="o">=</span><span class="mi">18</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>然後，Ruby 又有幫忙加了一些語法糖衣，讓你在中間加一些空白字元也是可以的：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">mary</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>最後就會讓你看起來像是在設定 age 屬性了。</p>

<h2>這...會不會太麻煩了點?</h2>

<p>照這樣說，如果每次想要用類似的屬性寫法，就必須要寫一對方法來回傳、設定，會不會有點太麻煩啊。</p>

<p>是的，就是要這麼麻煩。不過請放心，工程師都很懶的，所以有另外設計了幾個方法可以讓你快速的產生前面提到的 getter/setter。</p>

<p>如果你的 getter/setter 很單純，就只是有回傳、設定實體變數的話，那你可用 Ruby 內建的幾個方法：<code>attr_reader</code>、<code>attr_writer</code> 以及 <code>attr_accessor</code>：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Girl</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:age</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;mary = Girl.new(20)</span>
</span><span class='line'><span class="sr">puts mary.age    #=&gt; 20</span>
</span><span class='line'><span class="sr">mary.age = 18</span>
</span><span class='line'><span class="sr">puts mary.age    #=&gt; 18</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>其中，<code>attr_reader</code> 只會幫你產生 getter，<code>attr_writer</code> 只會幫你產生 setter，而 <code>attr_accessor</code> 則會幫你產生 getter 及 setter。如果不相信，可以執行下面這行看一下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">p</span> <span class="no">Girl</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>應該會看到以下結果：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="ss">:age</span><span class="p">,</span> <span class="ss">:age</span><span class="o">=]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>的確是產生了兩個方法，分別是 <code>age</code> 以及 <code>age=</code>。</p>

<h3>用了 attr_accessor 還能自己寫 getter 或 setter 嗎?</h3>

<p>當然是可以的，例如：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Girl</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:age</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def age=(new_age)</span>
</span><span class='line'><span class="sr">    @age = (new_age &gt; 18) ? 18 : new_age  # 如果大於 18，就只設定 18..</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">mary</span> <span class="o">=</span> <span class="no">Girl</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">mary</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">30</span>     <span class="c1"># 即使設定為 30 歲...</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">mary</span><span class="o">.</span><span class="n">age</span>     <span class="c1"># 還是會永保 18 歲 :)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因為你重新定義了 <code>age=</code> 方法，在執行的時候 Ruby 會跳出來跟你碎碎唸說 <code>warning: method redefined; discarding old age=</code>，但程式還是可執行。</p>

<p>所以，如果你只是想要客制化自己的 getter 或 setter 的話，可將 <code>attr_accessor</code> 改為 <code>attr_reader</code> 或 <code>attr_writer</code>，就不會有這個警告訊息了。</p>

<p>以上，希望對大家有幫助 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 語法放大鏡]]></title>
    <link href="http://blog.eddie.com.tw/2014/12/28/ruby-for-rails/"/>
    <updated>2014-12-28T14:35:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2014/12/28/ruby-for-rails</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/magnifying_glass.jpg" alt="image" />
photo by <a href="https://www.flickr.com/photos/puuikibeach/">davidd</a></p>

<p>大家在學習 Ruby 或 Ruby on Rails(以下簡稱 Rails)的時候，難免會有一些看不懂或是有一些不知道怎麼來的神奇語法，希望可以藉由這一系列的短文幫大家更容易的了解到底 Ruby/Rails 是怎麼回事。</p>

<p>預計會有以下的文章(持續更新中)：</p>

<h2>Ruby 相關：</h2>

<ol>
<li><a href="/2015/03/21/attr_accessor/">attr_accessor 是幹嘛的?</a></li>
<li><a href="/2015/03/24/class-and-module/">類別跟模組有什麼不一樣?</a></li>
<li><a href="/2015/04/19/namespace/">有時候會看到有兩個冒號寫法(例如 ActiveRecord::Base)它是什麼意思?</a></li>
<li>為什麼 Hash 好像有不同的寫法?</li>
<li>有的變數變前面有一個冒號(例如 :name)，是什麼意思?</li>
<li>有的變數前面有 @ 符號(例如  @users )，這是什麼意思?</li>
<li>你知道 <code>require</code> 這個語法幫你做了什麼事嗎?</li>
<li><code>gem install</code> 之後，那些 gem 安裝到哪裡去了?</li>
<li>想要學 Ruby 該看哪些書?</li>
</ol>


<h2>Rails 相關</h2>

<ol>
<li><a href="/2015/03/22/parameters/">為什麼 link_to 這個 view helper 的參數個數可長可短?</a></li>
<li>在 Rails 專案中，有個檔案叫 <code>schema.rb</code>，它是做什麼的?</li>
<li>有一個 Gemfile 了，為什麼還有個 Gemfile.lock? 這個檔案是幹嘛的?</li>
<li>常有時候會需要在指令面前加上 <code>bundle exec</code>，這有加沒加有什麼分別?</li>
<li>為什麼 <code>2.days.ago</code> 在內建的 irb 會找不到這個方法? 這不是 Ruby 語法嗎?</li>
<li>常在終端機裡下 <code>rake db:migrate</code> 指令，這個 <code>rake</code> 是什麼，後面那個 <code>db:migrate</code> 又是怎麼回事?</li>
<li>Strong Parameters 是什麼用途?</li>
<li>自己寫了一些的 view helper，有辦法也在 controller 裡使用嗎?</li>
<li>常在 controller 裡使用 <code>before_action</code>，它是一個方法嗎? 跟一般我們用 def 定義的有何不同?</li>
<li>在 application controller 裡看到的 <code>protect_from_forgery</code> 是什麼?</li>
<li>為什麼 model class 看起來空空的，但怎麼有那麼多好用的方法?</li>
<li>在 Gemfile 裡看到 <code>gem 'sass-rails', '~&gt; 4.0.3'</code> 或是 <code>gem 'uglifier', '&gt;= 1.3.0'</code> 這樣的寫法，那個 <code>~&gt;</code> 跟 <code>&gt;=</code> 各是代表什麼意思?</li>
<li>想要學 Rails 該看哪些書?</li>
</ol>


<p>以上，有的是關於 Ruby 的，有的是關於 Rails 的(嚴格說來其實都是 Ruby 的問題)
如果想到還有其它的會再繼續補充，或是大家有什麼想要知道也可以直接來信討論或是在本篇底下留言 :)</p>
]]></content>
  </entry>
  
</feed>
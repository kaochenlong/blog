<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 高見龍]]></title>
  <link href="http://blog.eddie.com.tw/category/ruby/atom.xml" rel="self"/>
  <link href="http://blog.eddie.com.tw/"/>
  <updated>2015-01-11T15:44:53+08:00</updated>
  <id>http://blog.eddie.com.tw/</id>
  <author>
    <name><![CDATA[高見龍]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 之 Ruby 語法放大鏡系列]]></title>
    <link href="http://blog.eddie.com.tw/2014/12/28/ruby-for-rails/"/>
    <updated>2014-12-28T14:35:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2014/12/28/ruby-for-rails</id>
    <content type="html"><![CDATA[<p>大家在學習 Ruby 或 Ruby on Rails(以下簡稱 Rails)的時候，難免會有一些看不懂或是有一些不知道怎麼來的神奇語法，希望可以藉由這一系列的短文幫大家更容易的了解到底 Ruby/Rails 是怎麼回事。</p>

<p>預計會有以下的文章(持續更新中)：</p>

<h2>Ruby 相關：</h2>

<ol>
<li>想要學 Ruby 該看哪些書?</li>
<li>有的變數前面有<code>@</code>符號(例如 <code>@users</code> )，這是什麼意思?</li>
<li>有的變數變前面有一個冒號(例如 <code>:name</code>)，是什麼意思?</li>
<li><code>attr_accessor</code> 是幹嘛的?</li>
<li>為什麼 Hash 好像有不同的寫法?</li>
<li>你知道 <code>require</code> 這個語法幫你做了什麼事嗎?</li>
<li>有時候會看到有兩個冒號寫法(例如 <code>ActiveRecord::Base</code>)它是什麼意思?</li>
<li><code>gem install</code> 之後，那些 gem 安裝到哪裡去了?</li>
</ol>


<h2>Rails 相關</h2>

<ol>
<li>想要學 Rails 該看哪些書?</li>
<li>為什麼 form_tag 的參數怎麼那麼難記?</li>
<li>有一個 Gemfile 了，為什麼還有個 Gemfile.lock? 這個檔案是幹嘛的?</li>
<li>在 Rails 專案中，有個檔案叫 <code>schema.rb</code>，它是做什麼的?</li>
<li>常有時候會需要在指令面前加上 <code>bundle exec</code>，這有加沒加有什麼分別?</li>
<li>為什麼 <code>2.days.ago</code> 在內建的 irb 會找不到這個方法? 這不是 Ruby 語法嗎?</li>
<li>常在終端機裡下 <code>rake db:migrate</code> 指令，這個 <code>rake</code> 是什麼，後面那個 <code>db:migrate</code> 又是怎麼回事?</li>
<li>Strong Parameters 是什麼用途?</li>
<li>自己寫了一些的 view helper，有辦法也在 controller 裡使用嗎?</li>
<li>常在 controller 裡使用 <code>before_action</code>，它是一個方法嗎? 跟一般我們用 def 定義的有何不同?</li>
<li>在 application controller 裡看到的 <code>protect_from_forgery</code> 是什麼?</li>
<li>為什麼 model class 看起來空空的，但怎麼有那麼多好用的方法?</li>
<li>在 Gemfile 裡看到 <code>gem 'sass-rails', '~&gt; 4.0.3'</code> 或是 <code>gem 'uglifier', '&gt;= 1.3.0'</code> 這樣的寫法，那個 <code>~&gt;</code> 跟 <code>&gt;=</code> 各是代表什麼意思?</li>
</ol>


<p>以上，有的是關於 Ruby 的，有的是關於 Rails 的(嚴格說來其實都是 Ruby 的問題)
如果想到還有其它的會再繼續補充，或是大家有什麼想要知道也可以直接來信討論或是在本篇底下留言 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Private Setter in Ruby]]></title>
    <link href="http://blog.eddie.com.tw/2014/10/22/private-setter-in-ruby/"/>
    <updated>2014-10-22T14:35:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2014/10/22/private-setter-in-ruby</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/private_no_entry.jpg" alt="image" />
photo by <a href="https://www.flickr.com/photos/bradhigham/">Brad Higham</a></p>

<p>之前在 <a href="/2011/07/26/public-protected-and-private-method-in-ruby/">Public, Protected and Private Method in Ruby</a> 這篇文章提到，在 Ruby 裡使用 private 方法的時候，不能明確的指出 receiver，以下面這段範例來說：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">hello</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">gossip</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private</span>
</span><span class='line'><span class="sr">  def gossip</span>
</span><span class='line'><span class="sr">    puts &quot;don&#39;t tell anyone!&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">snoopy</span> <span class="o">=</span> <span class="no">Dog</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">snoopy</span><span class="o">.</span><span class="n">hello</span>        <span class="c1"># =&gt; NoMethodError</span>
</span><span class='line'><span class="n">snoopy</span><span class="o">.</span><span class="n">gossip</span>       <span class="c1"># =&gt; NoMethodError</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在上面這段程式碼的第 13 行，因為它明確的指出 receiver (snoopy)，所以執行這行程式碼會出現會出現 <code>NoMethodError</code> 的錯誤；而在第 3 行，即使 receiver 是 <code>self</code> 也一樣是不行的。</p>

<p>這是在 Ruby 裡面 private 方法的設計。</p>

<p>不過，今天剛好有朋友拿了一段程式碼給我看，才發現原來上面這個規則原來也是有例外的，舉個例子來說：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">private</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:name</span><span class="o">=&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def hello</span>
</span><span class='line'><span class="sr">    self.gossip</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">greeting1</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def greeting2</span>
</span><span class='line'><span class="sr">    self.name = &quot;Snoopy&quot;</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">gossip</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;don&#39;t tell anyone!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;snoopy = Dog.new</span>
</span><span class='line'><span class="sr">snoopy.hello         # =&gt; NoMethodError</span>
</span><span class='line'><span class="sr">snoopy.gossip        # =&gt; NoMethodError</span>
</span><span class='line'><span class="sr">snoopy.greeting1     # =&gt; NoMethodError</span>
</span><span class='line'><span class="sr">snoopy.greeting2     # =&gt; It Works!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在上面這段範例中用 <code>attr_accessor</code> 做了一個 <code>name</code> 的 getter 跟 setter，並且把 getter/setter 設定成 private。在第 10 行的地方呼叫了 private 的 getter，並且明確的指出 receiver 是 <code>self</code>，照規則來說會出現錯誤不意外，但第 14 行用類似的方法呼叫了 private 的 setter 卻沒有出錯!</p>

<p>的確 private 方法不能指出明確的 receiver，但 setter 算是這個規則的例外。因為你不在前面加 self 的話，像這樣：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="k">def</span> <span class="nf">greeting</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;Snoopy&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這樣這個 <code>name</code> 不就變成區域變數的賦值了嗎?</p>

<p>想想看，如果在這裡呼叫 setter 不加 self 的話，那 Ruby 要怎麼分辨到底你是要呼叫 setter 還是區域變數?</p>

<p>話說回來，通常我們也不會沒事把 getter/setter 設定成 private，因為即然都做了 getter/setter 就是要給別人用的不是嗎? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 也可這樣寫]]></title>
    <link href="http://blog.eddie.com.tw/2014/10/16/happy-programming-ruby/"/>
    <updated>2014-10-16T14:35:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2014/10/16/happy-programming-ruby</id>
    <content type="html"><![CDATA[<p>很榮幸有機會能受邀參加 Livehouse.in 舉辦的 <a href="https://event.livehouse.in/2014/combo8/">Combo! 8 週連擊</a> 活動，本次的講題是「<a href="https://speakerdeck.com/eddie/happy-programming-ruby" target="_blank">Ruby 也可這樣寫</a>」，主要是來聊聊一些 Ruby 有趣(或奇怪)的語法，以及可以用 Ruby 做些什麼事 (without Rails)。</p>

<p><a href="https://speakerdeck.com/eddie/happy-programming-ruby" target="_blank"><img src="/images/2014/slide_happy_ruby_programming.jpg" alt="image" /></a>
投影片連結：<a href="https://speakerdeck.com/eddie/happy-programming-ruby">https://speakerdeck.com/eddie/happy-programming-ruby</a></p>

<p>這並不是什麼新的主題，也不是很艱深的內容，只是發現最近在接手一些別人寫的 Ruby on Rails (以下簡稱 Rails)專案時發現，似乎不少人並不清楚 Ruby 一些特有的寫法，把 Ruby/Rails 當做 PHP 在寫，所以就想來試著介紹這個主題給大家，讓大家可以多認識一些 Ruby。</p>

<p>曾經寫過 Rails 的朋友也許寫過以下的語法來取得兩天前的時間：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="o">.</span><span class="n">ago</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
很多人以為這是 Ruby 的語法，但如果你打開 irb 這樣寫卻會出現 <code>undefined method 'days' for 2:Fixnum</code> 的錯誤訊息，那是因為其實不管是 <code>days</code> 或是 <code>ago</code> 方法，都不是內建在 <code>Fixnum</code> 類別的方法，而是 Rails(更精準說的話應該是 ActiveSupport 這個 gem) 透過 Open Class 的手法在原本內建的 <code>Fixnum</code> 類別加上了這些便利的方法。</p>

<p>我想大家都不否認 Ruby 的確是被 Rails 給帶紅起來的，不過一位日本的 Ruby 大前輩前田修吾在他的一份簡報「<a href="http://shugo.net/tmp/rails-syndrome.pdf" target="_blank">Rails 症候群の研究</a>」提到「Ruby が何かわかっていない」(中譯：不知道 Ruby 是什麼東西)，其實也是有點讓人擔心 XD。</p>

<h2>Ruby 是什麼?</h2>

<p><a href="http://ruby-lang.org">Ruby</a> 是一種電腦程式語言，而 Rails 是一種使用 Ruby 建構出來的網站開發框架 (Web Framework)，但 Rails 不是一種電腦程式語言。(當然要說 Rails 這樣的 DSL 也是一種語言也是 ok 的)</p>

<p>Ruby 是一種物件導向的程式語言，在 Ruby 裡的所有東西都是物件(幾乎)，包括數字 5 也是，它是一個數字物件，所以我們在 Ruby 可以寫出像下面這樣的程式碼：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>  <span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello, Ruby&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>聽說...</h2>

<h3>聽說 Ruby 很慢!</h3>

<p>這個嘛，就要看跟誰比了，跟 C 語言比的話當然是一定慢的，但 Ruby 還沒有慢到不能用的地步(而且通常網站慢的地方都不是 Ruby 本身)。慢的地方如果真的很介意，也可改用其它方式來改善(例如改寫成 Extension)</p>

<p>曾經有朋友拿 Twitter 拋棄 Rails 而改用 Scala 為例說「你看看連 Twitter 都嫌 Rails 慢了!」，的確 Rails 並不是執行效率非常好的框架，但是回頭想想，貴單位的網站的用戶或流量做得到 Twitter 的 1% 嗎? 網站還沒做出來就先擔心撐不撐得住大流量可能也擔心得太早了一點 XD</p>

<p>PS:事實上現在 Twitter 的前端也還是用 Rails 在開發。</p>

<h3>聽說寫 Ruby 要先買 Mac?</h3>

<p>不知道從什麼時候開始開始流傳著「要寫 Ruby/Rails 要先買 Mac」這樣的都市傳說，特別是在 Ruby 相關的聚會活動或研討會，大家擺在桌上的幾乎是清一色的 Mac 筆電。其實開發 Ruby/Rails 專案真正合適的應該是 Linux/Ubuntu 的環境，畢竟最後的專案是佈署在這些平台上，而不是在你的 Mac 筆電裡。</p>

<p>那為什麼越來越多開發者都買了 Mac? 我想主要原因除了看起來比較潮之外，就是 Mac OS 本質上其實是 BSD 系統，它有內建的 terminal(或說是 shell) 可以用，對寫 Ruby/Rails 的開發者來說是很方便的。</p>

<h2>Ruby 可以這樣寫</h2>

<h3>if modifier</h3>

<p>以下是個很單純的 if 判斷：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'><span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">18</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;OK, I can see this movie&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在 Ruby 裡，像這樣單純的 if 判斷，我通常會把 if 放到後面，讓整個句字看起來更像一般的英文口語：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">18</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;OK, I can see this movie&quot;</span> <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">18</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>if..else.., case..when..</h3>

<p>如果您曾經寫過其它程式語言，對以下的語法應該不陌生：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">16</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if age &gt;= 0 &amp;amp;&amp;amp; age &amp;lt; 3 then</span>
</span><span class='line'><span class="sr">  puts &quot;Baby&quot;</span>
</span><span class='line'><span class="sr">elsif age &gt;= 3 &amp;amp;&amp;amp; age &amp;lt; 10 then</span>
</span><span class='line'><span class="sr">  puts &quot;Kids&quot;</span>
</span><span class='line'><span class="sr">elsif age &gt;= 10 &amp;amp;&amp;amp; age &amp;lt; 18 then</span>
</span><span class='line'><span class="sr">  puts &quot;Teenager&quot;</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  puts &quot;Oh Yeah!&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
就是一連串的 <code>if..else..</code> 啦，這樣的寫法沒有錯，也可以正常執行，但教課書通常會教說如果看到很多的 else if 的話，可考慮用 <code>case..when</code> 來處理：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">16</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;case</span>
</span><span class='line'><span class="sr">when age &gt;= 0 &amp;amp;&amp;amp; age &amp;lt; 3</span>
</span><span class='line'><span class="sr">  puts &quot;Baby&quot;</span>
</span><span class='line'><span class="sr">when age &gt;= 3 &amp;amp;&amp;amp; age &amp;lt; 10</span>
</span><span class='line'><span class="sr">  puts &quot;Kids&quot;</span>
</span><span class='line'><span class="sr">when age &gt;= 10 &amp;amp;&amp;amp; age &amp;lt; 18</span>
</span><span class='line'><span class="sr">  puts &quot;Teenager&quot;</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  puts &quot;Oh Yeah!&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
但中間那段大於小於的比較，我會喜歡用 Ruby 裡內建的 Range 來比對，看起來會更容易懂：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">age</span> <span class="o">=</span> <span class="mi">16</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;case age</span>
</span><span class='line'><span class="sr">when 0...3</span>
</span><span class='line'><span class="sr">  puts &quot;Baby&quot;</span>
</span><span class='line'><span class="sr">when 3...10</span>
</span><span class='line'><span class="sr">  puts &quot;Kids&quot;</span>
</span><span class='line'><span class="sr">when 10...18</span>
</span><span class='line'><span class="sr">  puts &quot;Teenager&quot;</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  puts &quot;Oh Yeah!&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>multiple assignment</h3>

<p>在 Ruby 可以一口氣指定好幾個變數的值：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
只要一行就可達到三行的效果。</p>

<p>在其它程式語言，如果想要交換 x 跟 y 兩個變數的值，通常會這樣做：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;交換 x, y 的值&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="n">tmp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
但在 Ruby 可以利用上面提到的變數多重指定的特性改寫成這樣：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;交換 x, y 的值&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
相當簡單又容易懂。</p>

<h3>unnecessary return</h3>

<p>以下是我在之前某個 Rails 專案裡面看到的一段程式碼：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">is_even</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這樣寫沒問題，只是一看就猜得出來可能是剛從別的程式語言轉過來沒多久。在 Ruby 裡的 return 並不是一定要寫的，所以上式再透過三元運算子的簡化可以變這樣：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">is_even</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
或可再精簡一些：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">is_even</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
事實上，如果再熟悉 Ruby 一點的話就會發現其實數字類別本身就有帶一個判斷偶數或奇數的方法：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="mi">2</span><span class="o">.</span><span class="n">even?</span>  <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="nb">puts</span> <span class="mi">4</span><span class="o">.</span><span class="n">odd?</span>   <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Open Class</h3>

<p>Ruby 的 Open Class 可以讓開發者任意的幫已存在的類別(甚至是內建類別)加功能，例如：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hello</span>
</span><span class='line'>    <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts &quot;Ruby&quot;.say_hello   # =&gt; Hello, Ruby</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
事實上 Rails 也是大量的使用了這個手法來擴充 Ruby 的功能，像是 <code>2.days.ago</code> 就是個經典的例子(實作方式請見 ActiveSupport 的原始碼)</p>

<p>前面一開始也提到，在 Ruby 裡什麼東西都是物件，包括數字也是，所以其實連最簡單的 1 + 1，其實它是執行了 1 這個物件的 <code>+</code> 方法：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">puts</span> <span class="mi">1</span><span class="o">.</span><span class="n">+</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
所以，透過 open class 的手法，甚至也可以去惡搞一下看起來最簡單的加法：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:ori_add</span> <span class="ss">:+</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">ori_add</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">ori_add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts 1 + 1   # =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這樣一來就會在數學加法上偷偷的再加 1，像是 1 + 1 = 3, 2 + 2 = 5，以此類推。</p>

<p>不過，Open Class 好用歸好用，風險感覺不小，好像一個不小心就容易被自己或別人改到一些不該改的東西。所以後來 Ruby 有推出了一個叫做 <a href="http://www.ruby-doc.org/core-2.1.3/doc/syntax/refinements_rdoc.html">Refinement</a> 的概念：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">StringExtension</span>
</span><span class='line'>  <span class="n">refine</span> <span class="nb">String</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_md5</span>
</span><span class='line'>      <span class="nb">require</span> <span class="s2">&quot;digest/md5&quot;</span>
</span><span class='line'>      <span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;using StringExtension&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Ruby&quot;</span><span class="o">.</span><span class="n">to_md5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Block</h3>

<p>在 Ruby 裡，Block 可以用 do..end 的方式來寫，也可以用大括號來寫，雖然大部份候兩者是可以互相替換的，但有一些微妙的地方沒注意的話，可能會造成預期外的結果，詳情請見<a href="/2011/06/03/do-end-vs-braces/">Do..End v.s Braces</a>。</p>

<h3>Private method</h3>

<p>在 Ruby 裡只要沒有特別聲明，所有的類別方法都是 public 的。如果想要在 Ruby 裡定義 private method 可以這樣做：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">secret_method</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
或是這樣也可以：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">secret_method</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private :secret_method</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>看到第二種 private 的寫法，你應該就會發現其實 public、protected 以及 private 在 Ruby 裡並不是關鍵字或保留字，它只是個方法而已。</p>

<p>在 private 方法的定義上，Ruby 跟其它程式語言的定義有些不太一樣。在 Ruby 的 private 方法，是只要沒有明確的指出 recevier 就可以使用，所以即使是子類別也可使用父類別的 private 方法：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">secret_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Don&#39;t tell anyone!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Dog &amp;lt; Animal</span>
</span><span class='line'><span class="sr">  def hello</span>
</span><span class='line'><span class="sr">    secret_method</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Dog</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span>  <span class="c1"># =&gt; Don&#39;t tell anyone!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
但其實 Ruby 的 private 方法也不是真的那麼 private：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">secret_method</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private :secret_method</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="no">Animal</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:secret_method</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>更多相關細節可參考 <a href="/2011/07/26/public-protected-and-private-method-in-ruby/">Public, Protected and Private Method in Ruby</a>。</p>

<p>參考資料：<a href="http://en.wikipedia.org/wiki/Message_passing">Message Passing</a></p>

<h3>Dynamic Method</h3>

<p>假設我們有一段程式碼長得像這樣：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ComputerStore</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get_cpu_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def get_cpu_price(workstation_id)</span>
</span><span class='line'><span class="sr">    # ...</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">get_mouse_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def get_mouse_price(workstation_id)</span>
</span><span class='line'><span class="sr">    # ...</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">get_keyboard_info</span><span class="p">(</span><span class="n">workstation_id</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def get_keyboard_price(workstation_id)</span>
</span><span class='line'><span class="sr">    # ...</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
有個軟體開發的原則叫做 <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a> (Don't Repeat Yourself)，簡單的說就是不要一直寫重複的程式。在開發軟體的時候，如果可以把程式碼寫得 DRY 一點，日後在維護的時候也會輕鬆得多。</p>

<p>所以，如果上面這段程式碼假設每個 <code>get_xxx_info</code> 跟 <code>get_xxx_price</code> 的方法實作內容都差不多，以 DRY 原則來看的話，上面這個看起來感覺就相當的「潮」(WET)啊，潮到出水了 XD</p>

<p>在這個時候就可以利用動態定義方法來整理這些看起來很重複的程式碼。在 Ruby 要動態的定義方法，可以用 <code>define_method</code>：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">define_method</span> <span class="ss">:hello</span> <span class="k">do</span> <span class="o">|</span><span class="n">param</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">param</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;hello &quot;Ruby&quot;  # =&gt; Hello, Ruby</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
所以，原來上面那段看起來不太 DRY 的程式碼，可以整理成這樣：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ComputerStore</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">set_component</span><span class="p">(</span><span class="n">component</span><span class="p">)</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;get&lt;em&gt;</span><span class="si">#{</span><span class="n">component</span><span class="si">}</span><span class="s2">&lt;/em&gt;info&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">workstation_id</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">define_method</span> <span class="s2">&quot;get&lt;em&gt;</span><span class="si">#{</span><span class="n">component</span><span class="si">}</span><span class="s2">&lt;/em&gt;price&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">workstation_id</span><span class="o">|</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  set_component :cpu</span>
</span><span class='line'><span class="sr">  set_component :mouse</span>
</span><span class='line'><span class="sr">  set_component :keyboard</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
還可以再簡化一些：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ComputerStore</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">set_components</span><span class="p">(</span><span class="o">*</span><span class="n">components</span><span class="p">)</span>
</span><span class='line'>    <span class="n">components</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">component</span><span class="o">|</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;get&lt;em&gt;</span><span class="si">#{</span><span class="n">component</span><span class="si">}</span><span class="s2">&lt;/em&gt;info&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">workstation_id</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">define_method</span> <span class="s2">&quot;get&lt;em&gt;</span><span class="si">#{</span><span class="n">component</span><span class="si">}</span><span class="s2">&lt;/em&gt;price&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">workstation_id</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  set_components :cpu, :mouse, :keyboard</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這樣一來，以後如果要再加硬體，也只要在 <code>set_components</code> 後面加上去就行了，看起來應該比原來的好維護多了。</p>

<h3>Method Missing</h3>

<p>如果大家曾經使用過 Rails，也許多少有用過類似 <code>Book.find_by_id</code> 或 <code>Book.find_by_name</code> 的神奇語法。你可能很好奇，為什麼明明你沒有定義這些方法，也一樣可以正常執行不會出錯?</p>

<p>其實，Ruby 在尋找方法的時候，會先往該物件的所屬類別找，找不到會再往它的父類別找(其實真正尋找方法的細節更複雜一些 XD)，如果一直找不到，最後就會呼叫 <code>method_missing</code> 這個方法。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;You just called a method </span><span class="si">#{</span><span class="n">method_name</span><span class="si">}</span><span class="s2"> with </span><span class="si">#{</span><span class="n">args</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;some_method_not_exist(1, 2, 3)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="no">You</span> <span class="n">just</span> <span class="n">called</span> <span class="n">a</span> <span class="nb">method</span> <span class="n">some_method_not_exist</span> <span class="n">with</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
所以當你在適當的地方覆寫了 <code>method_missing</code>，就可以做出類似的效果：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;find_by&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">=</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">&quot;find_by_&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;find something by </span><span class="si">#{</span><span class="n">q</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="k">super</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Book.find_by_id    # =&gt; find something by id</span>
</span><span class='line'><span class="sr">Book.find_by_name  # =&gt; find something by name</span>
</span><span class='line'><span class="sr">Book.wtf           # =&gt; ERROR!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
看到了嗎? 即使原先沒有定義 <code>Book.find_by_id</code> 或 <code>Book.find_by_name</code>，在執行時候因為 <code>find_by</code> 開頭的方法被我自己寫的 <code>method_missing</code> 給攔了下來而不會出錯，但其它以外的方法則會呼叫內建的 <code>method_missing</code> 而噴出錯誤訊息。</p>

<h2>有趣(或奇怪)的 Ruby 語法</h2>

<p>寫程式有時候是件很悶的工作，偶爾寫點有趣的程式碼娛樂別人或自己也不錯。像是下面這個在 <a href="https://github.com/tric/trick2013">Trick 2013</a>比賽中是「Most readable」的程式碼：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">begin</span> <span class="n">with</span> <span class="n">an</span> <span class="n">easy</span> <span class="n">program</span><span class="o">.</span>
</span><span class='line'><span class="n">you</span> <span class="n">should</span> <span class="n">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">write</span>
</span><span class='line'><span class="n">a</span> <span class="n">program</span> <span class="k">unless</span> <span class="k">for</span> <span class="n">you</span><span class="p">,</span>
</span><span class='line'><span class="n">program</span> <span class="k">in</span> <span class="n">ruby</span> <span class="n">language</span> <span class="n">is</span>
</span><span class='line'><span class="n">too</span> <span class="n">difficult</span><span class="o">.</span> <span class="no">At</span> <span class="n">the</span> <span class="k">end</span>
</span><span class='line'><span class="n">of</span> <span class="n">your</span> <span class="n">journey</span> <span class="n">towards</span> <span class="n">the</span>
</span><span class='line'><span class="n">ultimate</span> <span class="n">program</span><span class="p">;</span> <span class="n">you</span> <span class="n">must</span>
</span><span class='line'><span class="n">be</span> <span class="n">a</span> <span class="n">part</span> <span class="n">of</span> <span class="n">a</span> <span class="n">programming</span>
</span><span class='line'><span class="n">language</span><span class="o">.</span> <span class="no">You</span> <span class="n">will</span> <span class="k">end</span> <span class="k">if</span>
</span><span class='line'><span class="n">you</span> <span class="o">!=</span> <span class="n">program</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
寫得感覺像是一篇文章(其實內文無意義)，但其它是一段可以正常執行不會發生錯誤的 Ruby 程式碼。下面這個則是「Best way to return true」：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="vg">$ruby</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Object</span><span class="p">){</span><span class="o">|</span><span class="n">oriented</span><span class="o">|</span> <span class="n">language</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
因為在 Ruby 的 global variable 預設值是 nil，又，在 Ruby 什麼東西都是物件，包括 nil 也是，所以 <code>$ruby.is_a?(Object)</code> 會回傳 true。至於後面傳入的 Block 因為不會被呼叫，所以傳什麼進去都無所謂了。</p>

<p>阿宅寫程式也可以很浪漫的：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="no">It</span> <span class="n">can</span> <span class="n">be</span> <span class="n">wonderful</span> <span class="k">if</span> <span class="s2">&quot;the world&quot;</span><span class="o">.</span><span class="n">end_with?</span> <span class="s2">&quot;you&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
或是：
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">I</span> <span class="n">will</span> <span class="n">love</span> <span class="n">you</span> <span class="k">until</span> <span class="s2">&quot;the end of the world&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
這其實只是透過邏輯短路(Short-circuit)玩的把戲，因為後面的 if 或 until 在經過評估之後都不會成立，所以前面的語法就算有錯也不會被執行到。</p>

<p>另外，其實 Ruby 的類別名稱也就只是個常數而已，所以這樣惡搞你的同事也是 ok 的...
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">BookList</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="p">(</span><span class="nb">rand</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span> <span class="p">?</span> <span class="nb">Array</span> <span class="p">:</span> <span class="no">Hash</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;b = BookList.new</span>
</span><span class='line'><span class="sr">b &amp;lt;&amp;lt; &quot;Ruby&quot;   # =&gt; 將有 10% 的機會發生錯誤</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>因為 Ruby 的方法名字不一定只能用英文字母，所以可以寫出像這樣的程式碼：
<img src="/images/2014/ruby_code_fish.png" alt="image" /><br />
看著看著就覺得餓了...</p>

<p>然後如果你知道 <code>attr_accessor</code> 其實也只是個會幫你產生一對 getter/setter 的類別方法的話，對產生的 getter/setter 不滿意或是想要再做些別的事話，也可以自己定義：
<img src="/images/2014/ruby_code_girl.png" alt="image" /><br />
這樣你就寫出了一個「可以永保青春的"方法"」了 XD</p>

<h3>小結</h3>

<p>看到這裡，你可能會覺得在 Ruby 變數不用宣告就可直接用，內建類別可以透過 Open Class 方式來惡搞，private 方法又一點都不 private，整個只像是僅供參考，這樣不會很恐怖嗎?</p>

<p>我想，開發者大多知道自己在做什麼。當初 Ruby 在設計的時候是採取相信開發者的立場，給開發者很大的彈性與自由，這其實也是我最後選擇 Ruby 的原因。</p>

<p>Ruby/Rails 被很多人認為是很魔術的程式語言或工具，但只要瞭解它是怎麼運作的，其實也沒真的非常神奇。技術不用學多，一、二門專精的練起來就已可不愁吃穿了。</p>

<p>最後，
引用一段最近在朋友的 Facebook 上看到的一段話：</p>

<p><blockquote><p>"Difference between a master and a beginner? The master has failed more times than the beginner has even tried."<br/>"大師與新手之間的差別，就是大師失敗過的次數，比新手嘗試過的次數還多"</p></blockquote></p>

<p>共勉之 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「有心人」之 Ruby 課程]]></title>
    <link href="http://blog.eddie.com.tw/2014/08/22/lets-learn-ruby/"/>
    <updated>2014-08-22T07:35:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2014/08/22/lets-learn-ruby</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/ruby_word.jpg" alt="image" /></p>

<p>記得在去年年初的時候，因為自己想找幾個一起打拼的伙伴而發起了一個「<a href="http://blog.eddie.com.tw/2013/04/22/1st-ruby-and-rails-training-course/">有心人</a>」的活動，感謝大家的捧場以及社群朋友們的支持，活動順利結束。</p>

<p>然後，一直掛在嘴邊說要辦的「第二梯次」，總因為手邊的雜務而擱置。雖然後來斷斷續續的也有在中研院的自由軟體工作坊開一些 Ruby 的入門課或是在社群活動的分享，但就似乎變成有空才能開。</p>

<p>現在，我們成立了一家叫做<a href="http://5xruby.tw">五倍紅寶石</a>的公司，在更多朋友的幫忙下，我們有更多的時間及資源可以來做推廣 Ruby 這件事了，畢竟推廣 Ruby 本來也是當初成立這家公司的最主要目的。</p>

<p>所以，在與夥伴們討論後，我們決定要來持續的無料推廣 Ruby，每個月固定至少會有個一天是 Ruby 推廣課程，希望可以讓更多人可以認識這個有趣可愛的程式語言。</p>

<p>詳情請見：<a href="http://5xruby.tw/courses/lets-learn-ruby-1">http://5xruby.tw/courses/lets-learn-ruby-1</a></p>

<ul>
<li>上課地點：台北車站附近</li>
<li>費用：0 元，惟上課學員需自備筆電，作業系統不限。</li>
</ul>


<p>歡迎大家都可以開開心心的來認識、學習這個有趣的程式語言 :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[五倍祝福，五倍的紅寶石]]></title>
    <link href="http://blog.eddie.com.tw/2014/05/29/5xruby/"/>
    <updated>2014-05-29T03:00:00+08:00</updated>
    <id>http://blog.eddie.com.tw/2014/05/29/5xruby</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/5xruby.jpg" alt="image" /></p>

<p>這回，您不需要自己斷開鎖鏈或斷開魂結，也不用燒毀什麼東西了 :)</p>

<p>「五倍紅寶石」是我與幾位台灣 Ruby 社群的朋友共同成立的一家公司，希望可以透過藉由教育訓練、企業培訓等課程，將 Ruby 推廣給更多的企業、開發者。</p>

<p>網站：<a href="http://5xruby.tw" target="_blank">http://5xruby.tw</a></p>

<h3>緣起</h3>

<p>我們是一群在台灣的 Ruby 程式語言的愛好者，每天的工作都是跟 Ruby / Rails 相關。</p>

<p>近一、二年來，Ruby / Rails 的人才需求增加，年薪超過百萬的高薪職缺紛紛出現，吸引越來越多人想要進入 Ruby / Rails 的領域。除自行學習以外，也很積極參加社群舉辦的聚會與分享、交流。</p>

<p>我們這幾年來持續的在台灣大專院校（成大、輔大、台北商專..等校) 開授 Ruby 以及 Rails 課程，觀察學生們的學習狀況，大多覺得 Ruby / Rails 其實並不難學，自己看書或是照著官網文件練習就能練到一定的程度。但要進階至可滿足實戰需求，不容易藉由自學可以短期達成，而是需要更多的實戰經驗，或是導師的帶領。也因此，在台灣，較資深或有經驗的 Ruby / Rails 開發者相當難找。</p>

<p>我們也走訪了一些企業的 IT 部門，請教他們為什麼不採用 Ruby / Rails 的原因，大多也是因為資深的 Ruby / Rails 的工程師難找，或是背後沒有商業公司的技術支援，遇到問題的時候不知道該找誰求救。</p>

<p>於是，我們這幾位愛好 Ruby 的朋友便開始討論「也許我們應該來成立一間專門提供 Ruby/Rails 相關的技術諮詢或是教育訓練的公司」。</p>

<p>我們最終的目的，是希望在台灣可以有越來越多的企業能了解或採用 Ruby 這個優雅、有趣，並且極具生產力的程式語言做為主要開發工具，更快速的實現您的想法。</p>

<p>感謝多位業界前輩、先進的支持與鼓勵：</p>

<p><blockquote><p>Programmer 最有價值的是經驗值，「五倍紅寶石」的導師都是社群內數一數二的資深 Rubyist，由他們來帶領學員一探 Ruby 世界的神奇之處，實在是最佳選擇。</p><footer><strong>Victor Lam</strong><cite>EZTABLE 香港總經理</cite></footer></blockquote></p>

<p><blockquote><p>Eddie and his team are of the most dedicated Ruby evangelists I have ever come across. With their passion and professionalism, Ruby learners will leapfrog in their progress.</p><footer><strong>Jason Hsu</strong><cite>Founder of the Big Questions &amp; TEDxTaipei</cite></footer></blockquote></p>

<p><blockquote><p>還在尋找專業的 Ruby/Rails 師資嗎？別懷疑了，台灣最頂尖的 Rubyist 盡在「五倍紅寶石」！</p><footer><strong>Felix Lin</strong><cite>「搭配」網站創辦人</cite></footer></blockquote></p>

<p><blockquote><p>慕凡和龍哥是業界數一數二的 Ruby 大師，他們不光是底子深厚，也很懂得引導、訓練學習路上遇到挫折的 Ruby/Rails 學子。很慶幸有他們的協助讓我進入紅寶石的美妙世界。</p><footer><strong>花水木 Hana Chang</strong><cite>Co-Founder and CEO of BountyHunter</cite></footer></blockquote></p>

<p><blockquote><p>選擇程式語言很重要，但選擇優秀的導師更重要！能跟擁有多年 Ruby/Rails 實戰經驗、活躍於社群的頂尖 Rubyist 學習，將一窺程式開發殿堂之藝術！我堅信：專業事讓專業的來，而專業的「五倍紅寶石」是寶藏，就等大家來挖掘。</p><footer><strong>謝耀輝 John Sie</strong><cite>Accuvally Inc.共同創辦人暨營運長</cite></footer></blockquote></p>

<p><blockquote><p>「五倍紅寶石」的導師們都是業界經驗豐富的實戰高手，提供的課程及咨詢絕對能讓你大幅省去自行摸索的時間。</p><footer><strong>Ben Lin</strong><cite>CEO@POP</cite></footer></blockquote></p>

<p><blockquote><p>曾有幸與徐曦與見龍一起工作，徐曦自我要求與向上進取的態度令人稱佩，見龍對危機處理與當責的責任感也值得稱許。「五倍紅寶石」的其他夥伴也是一時之選，相信這是一個很棒的組合。</p><footer><strong>呂元鐘 Max Lu</strong><cite>Buyble 國際精品購物 創辦人</cite></footer></blockquote></p>

<h3>公司名字的由來</h3>

<p>為什麼公司會取這個看起來有點好笑的名字? 話說某天下午，我們幾個人在討論公司要取什麼名字...</p>

<p>「紅寶石股份有限公司? 聽起來好普通，而且會不會大家以為我們是珠寶商啊」。</p>

<p>就在大家一直想不到個有代表性又好記的名字的時候，突然來了一個「五倍紅寶石」，大家都笑了，但就在一陣狂笑之中，大家一致鼓掌通過決定要用這個聽起來有點 kuso 的名字了 XD</p>

<h3>怎麼決定負責人是誰的?</h3>

<p>即然是一家 Ruby 公司，Ruby 公司的事當然就是要交給 Ruby 解決。所以我們打開了 <code>irb</code>，輸入一段簡單的程式碼：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="o">[</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="s1">&#39;D&#39;</span><span class="o">].</span><span class="n">sample</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>嗯，我們的負責人這樣選出來了 XD</p>

<h3>說明會</h3>

<p>如果您對我們的課程有興趣，或是不知道「五倍紅寶石」到底是在賣什麼藥，歡迎您 6/5（星期四）晚上 19:30 前來參加我們舉辦的說明會，我們在現場將準備一些簡單的點心及飲料。</p>

<p>當然，只是要來閒聊或是找好陣子不見的朋友聚一聚也很歡迎。</p>

<ul>
<li>時間：2014/6/5 星期四 19:30</li>
<li>地點：TED x Taipei Space</li>
<li>地址：台北市金山南路一段 9 號 4 樓</li>
</ul>


<p>請按<a href="http://www.accupass.com/go/5xruby" target="_blank">這裡</a>前往報名網站</p>
]]></content>
  </entry>
  
</feed>